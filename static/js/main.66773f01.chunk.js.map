{"version":3,"sources":["Types.js","Socket.js","Canvas.js","App.js","serviceWorker.js","index.js"],"names":["Types","VLX","data","Object","classCallCheck","this","front","parseCube","back","slice","arr","top","bot","left","right","toType","dat","type","console","log","socket","listening","Socket","ip","concat","WebSocket","onopen","event","keys","forEach","key","send","payload","onmessage","JSON","parse","formattedData","cb","onclose","stringify","warn","source","dest","Map","set","delete","size","HEIGHT","WIDTH","charSize","drawOffset","Canvas","_useState","useState","fx","fy","bx","by","_useState2","slicedToArray","pose","setPose","canvasRef","useRef","useEffect","ctx","current","getContext","clearRect","fillRect","sub","inc","f","b","unsub","react_default","a","createElement","className","id","ref","width","height","App","setIP","value","onChange","e","target","onClick","boot","stop","src_Canvas","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66773f01.chunk.js","sourcesContent":["const Types = {}\r\nclass VLX {\r\n  constructor (data) {\r\n    this.front = this.parseCube(data)\r\n    this.back = this.parseCube(data.slice(4))\r\n  }\r\n  parseCube(arr) {\r\n    return { top: arr[0], bot: arr[1], left: arr[2], right: arr[3] }\r\n  }\r\n}\r\n\r\nTypes.toType = function (dat) {\r\n  switch (dat.type) {\r\n    case 'vlx':\r\n      return new VLX(dat.data);\r\n    default:\r\n      console.log('Unknown Type')\r\n      return dat.data\r\n  }\r\n}\r\n  \r\nexport default Types\r\n","import Types from './Types';\r\n\r\n//Shape\r\n// listening: {\r\n//   'pose': MAP {\r\n//     'Canvas': setState\r\n//     'Logger': setState\r\n//     'Printer': setState\r\n//   },\r\n//   'diagnostics',\r\n//   'errors',\r\n//   'logs'\r\n// }\r\nlet socket = null\r\nlet listening = {}\r\nconst Socket = {}\r\n\r\nSocket.boot = function (ip) {\r\n  ip = ip || 'localhost'\r\n  console.log(`connnecting to ${ip}`)\r\n  socket = new WebSocket(`ws://${ip}:8080`);\r\n  socket.onopen = (event) => {\r\n    console.log('Connected', event);\r\n    const keys = Object.keys(listening)\r\n    keys.forEach((key) => {\r\n      Socket.send({type: 'sub', payload: key})\r\n    })\r\n    Socket.send({type: 'start'})\r\n  };\r\n  // Listen for messages\r\n  socket.onmessage = (event) => {\r\n    console.log('Message from server ', event);\r\n    const dat = JSON.parse(event.data);\r\n    const formattedData = Types.toType(dat)\r\n    listening[dat.type].forEach((cb) => {\r\n      cb(formattedData);\r\n    })\r\n  }\r\n  socket.onclose = (event) => {\r\n    console.log(\"WebSocket is closed now.\");\r\n  };\r\n}\r\nSocket.send = function (data) {\r\n  if (socket) {\r\n    socket.send(JSON.stringify(data))\r\n  } else {\r\n    console.warn('Socket not ready!')\r\n  }\r\n}\r\nSocket.sub = function (source, dest, cb) {\r\n  if (!listening[source]) {\r\n    listening[source] = new Map()\r\n    Socket.send({type: 'sub', payload: source})\r\n  }\r\n  listening[source].set(dest, cb)\r\n}\r\nSocket.unsub = function (source, dest) {\r\n  if (listening[source]) { // Map exists\r\n    listening[source].delete(dest) // Delete\r\n    if (listening[source].size < 1) { // And potentially unsub\r\n      Socket.send({type: 'unsub', payload: source})\r\n    }\r\n  }\r\n}\r\nSocket.stop = function () {\r\n  Socket.send({type: 'stop'})\r\n}\r\nexport default Socket\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport Socket from './Socket';\r\n\r\nconst HEIGHT = 400;\r\nconst WIDTH = 400;\r\nconst charSize = 10;\r\nconst drawOffset = (charSize - 1) / 2\r\nfunction Canvas() {\r\n  const [pose, setPose] = useState({fx: WIDTH / 2, fy: HEIGHT / 2, bx: WIDTH / 2, by: HEIGHT / 2})\r\n  const canvasRef = useRef(null)\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n    const ctx = canvas.getContext('2d')\r\n    ctx.clearRect(0, 0, WIDTH, HEIGHT)\r\n    ctx.fillRect(WIDTH / 2, 0, 1, HEIGHT)\r\n    ctx.fillRect(0, HEIGHT / 2, WIDTH, 1)\r\n    // ctx.fillRect(0, pose.x, WIDTH, 1)\r\n    ctx.fillRect(pose.fx - drawOffset , pose.fy - drawOffset, charSize, charSize);\r\n    ctx.fillRect(pose.bx - drawOffset , pose.by - drawOffset, charSize, charSize);\r\n  }, [canvasRef, pose])\r\n  useEffect(() => {\r\n    function setVLX (inc) {\r\n      const totY = 1000\r\n      const totX = 1000\r\n      const f = inc.front\r\n      const b = inc.back\r\n      setPose({ fx: 200 + (f.left - f.right) / totX * WIDTH,\r\n                fy: 200 + (f.top - f.bot) / totY * HEIGHT,\r\n                bx: 200 + (b.left - b.right) / totX * WIDTH,\r\n                by: 200 + (b.top - b.bot) / totY * HEIGHT,\r\n              })\r\n    }\r\n    Socket.sub('vlx', 'Canvas', setVLX)\r\n    // const interval = setInterval(randState, 20);\r\n    // return () => clearInterval(interval)\r\n    return function cleanup() {\r\n      Socket.unsub('vlx', 'Canvas')\r\n    }\r\n  \r\n  }, [])\r\n  \r\n  return (\r\n    <div className=\"canvasBlock\">\r\n      <canvas \r\n        id=\"myCanvas\"\r\n        ref={canvasRef}\r\n        width=\"400\"\r\n        height=\"400\"\r\n        // style={{border:\"1px solid #000000\"}}\r\n       />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Canvas;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Socket from './Socket'\r\nimport Canvas from './Canvas'\r\n\r\nfunction App() {\r\n  const [ip, setIP] = useState('')\r\n  function go () {\r\n    Socket.boot(ip)\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <input value={ip} onChange={(e) => setIP(e.target.value)} />\r\n        <button onClick={go}>GO!</button>\r\n        <button onClick={Socket.stop}>STOP!</button>\r\n\r\n        <Canvas />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}